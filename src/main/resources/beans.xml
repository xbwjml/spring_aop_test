<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
">


        <!--配置spring的IOC，把service对象配置进来-->
        <!--<bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl" ></bean>-->

        <!--基于xml的aop配置步骤
            1.把通知的Bean也交给spring来管理
            2.使用aop:config标签表明开始aop的配置
            3.使用aop:aspectr表明配置切面
                    id:是给切面提供一个唯一标识
                    ref:是制定通知类的id
            4.在aop:aspect标签的内部使用对应标签来配置通知的类型
                    我们现在的事例是让printLog方法在切入点方法执行之前，所以是前置通知
                    aop:before 表示配置前置通知
                        method:用于指定Logger类中哪个方法是前置通知
                        pointcut:用于指定切入点表达式，该表达式的含义指的是对业务层中的哪些方法增强
                        切入点表达式写法： execution(表达式)
                            表达式: 访问修饰符 返回值 包名.类名.方法名(参数列表)
        -->

        <!--配置logger类-->
        <!--<bean id="logger" class="com.itheima.service.impl.utils.Logger" ></bean>-->
        <!--配置aop-->
        <!--<aop:config>-->
            <!--<aop:aspect id="logAdvice" ref="logger" >-->
                <!--前置通知-->
                <!--<aop:before method="beforePrintLog" pointcut="execution(public void com.itheima.service.impl.AccountServiceImpl.saveAccout())"></aop:before>-->
                <!--后置通知-->
                <!--<aop:after-returning method="afterRetPrintLog" pointcut="execution(public void com.itheima.service.impl.AccountServiceImpl.saveAccout())"></aop:after-returning>-->
                <!--异常通知-->
                <!--<aop:after-throwing method="afterThrowPrintLog" pointcut="execution(public void com.itheima.service.impl.AccountServiceImpl.saveAccout())"></aop:after-throwing>-->
                <!--最终通知-->
                <!--<aop:after method="afterPrintLog" pointcut="execution(public void com.itheima.service.impl.AccountServiceImpl.saveAccout())"></aop:after>-->
                <!--环绕通知-->
                <!--<aop:around method="aroundPrintLog" pointcut="execution(public void com.itheima.service.impl.AccountServiceImpl.saveAccout())"></aop:around>-->
            <!--</aop:aspect>-->
        <!--</aop:config>-->


    <!--===========================================================================================================================-->

    <!--配置spring创建容器时要扫描的包-->
    <context:component-scan base-package="com.itheima"></context:component-scan>
    <!--配置spring开启注解aop的支持-->
    <aop:aspectj-autoproxy/>

</beans>